@article{DBLP:journals/corr/abs-2104-06740,
  author    = {Patrick Dinklage and
               Johannes Fischer and
               Alexander Herlez},
  title     = {Engineering Predecessor Data Structures for Dynamic Integer Sets},
  journal   = {CoRR},
  volume    = {abs/2104.06740},
  year      = {2021},
  url       = {https://arxiv.org/abs/2104.06740},
  eprinttype = {arXiv},
  eprint    = {2104.06740},
  timestamp = {Mon, 19 Apr 2021 16:45:47 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2104-06740.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{WILLARD198381,
title = {Log-logarithmic worst-case range queries are possible in space Θ(N)},
journal = {Information Processing Letters},
volume = {17},
number = {2},
pages = {81-84},
year = {1983},
issn = {0020-0190},
doi = {https://doi.org/10.1016/0020-0190(83)90075-3},
url = {https://www.sciencedirect.com/science/article/pii/0020019083900753},
author = {Dan E. Willard},
keywords = {Priority queues, stratified trees (often called ‘Van Emde Boas trees’), sparse tables, special search algorithm of Fredmann, Komolós and Szemerédi},
abstract = {Let S denote a set of N records whose keys are distinct nonnegative integers less than some initially specified bound M. This paper introduces a new data structure, called the y-fast trie, which uses Θ(N) space and Θ(log log M) time for range queries on a random access machine. We will also define a simpler but less efficient structure, called the x-fast trie.}
}

@article{10.1145/3409371,
author = {Navarro, Gonzalo and Rojas-Ledesma, Javiel},
title = {Predecessor Search},
year = {2020},
issue_date = {September 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {53},
number = {5},
issn = {0360-0300},
url = {https://doi.org/10.1145/3409371},
doi = {10.1145/3409371},
abstract = {The predecessor problem is a key component of the fundamental sorting-and-searching core of algorithmic problems. While binary search is the optimal solution in the comparison model, more realistic machine models on integer sets open the door to a rich universe of data structures, algorithms, and lower bounds. In this article, we review the evolution of the solutions to the predecessor problem, focusing on the important algorithmic ideas, from the famous data structure of van Emde Boas to the optimal results of Patrascu and Thorup. We also consider lower bounds, variants, and special cases, as well as the remaining open questions.},
journal = {ACM Comput. Surv.},
month = {sep},
articleno = {105},
numpages = {35},
keywords = {cell-probe model, integer sorting, Integer data structures, RAM model}
}

@inproceedings{rbtrees,

  author={Guibas, Leo J. and Sedgewick, Robert},

  booktitle={19th Annual Symposium on Foundations of Computer Science (sfcs 1978)}, 

  title={A dichromatic framework for balanced trees}, 

  year={1978},

  volume={},

  number={},

  pages={8-21},

  doi={10.1109/SFCS.1978.3}}

@inproceedings{rbtreejoin,
author = {Blelloch, Guy E. and Ferizovic, Daniel and Sun, Yihan},
title = {Just Join for Parallel Ordered Sets},
year = {2016},
isbn = {9781450342100},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2935764.2935768},
doi = {10.1145/2935764.2935768},
abstract = {Ordered sets (and maps when data is associated with each key) are one of the most important and useful data types. The set-set functions union, intersection and difference are particularly useful in certain applications. Brown and Tarjan first described an algorithm for these functions, based on 2-3 trees, that meet the optimal Θ(m log (n/m+1)) time bounds in the comparison model (n and m ≤ n are the input sizes). Later Adams showed very elegant algorithms for the functions, and others, based on weight-balanced trees. They only require a single function that is specific to the balancing scheme---a function that joins two balanced trees---and hence can be applied to other balancing schemes. Furthermore the algorithms are naturally parallel. However, in the twenty-four years since, no one has shown that the algorithms, sequential or parallel are asymptotically work optimal. In this paper we show that Adams' algorithms are both work efficient and highly parallel (polylog span) across four different balancing schemes---AVL trees, red-black trees, weight balanced trees and treaps. To do this we use careful, but simple, algorithms for Join that maintain certain invariants, and our proof is (mostly) generic across the schemes.To understand how the algorithms perform in practice we have also implemented them (all code except Join is generic across the balancing schemes). Interestingly the implementations on all four balancing schemes and three set functions perform similarly in time and speedup (more than 45x on 64 cores). We also compare the performance of our implementation to other existing libraries and algorithms.},
booktitle = {Proceedings of the 28th ACM Symposium on Parallelism in Algorithms and Architectures},
pages = {253–264},
numpages = {12},
keywords = {difference, union, treap, balanced binary search tree, AVL tree, split, red-black tree, set functions, parallel algorithm, join, intersection, weight-balanced tree},
location = {Pacific Grove, California, USA},
series = {SPAA '16}
}

  

